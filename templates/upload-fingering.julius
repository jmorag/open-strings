const vue = new Vue({
  el: "##{rawJS uploadId}",
  data: {
    show_add_work_link: false,
    work_id: 0,
    movement_id: 0,
    start_measure: "", // usually a number, but should be displayed as empty on paint
    movements: [],
    parts: [],
    part: "",
    xml_file: null,
    table_fields: [
      "movement",
      "part",
      "measures",
      "description",
      {
        key: "uploaded_by",
        formatter: ({ user, time }) => {
          const d = new Date(time);
          return `${user} on ${d.toLocaleDateString()} at ${d.toLocaleTimeString()}`;
        }
      }
    ],
    entries: [],
    editor: new FingeringEditor(#{renderId}),
    description: "",
    loading: false,
    show_alert: false,
    alert_message: "",
    show_success: false,
    disable_submit: true,
    show_editor: false,
    show_instructions: false,
  },
  components: { Autocomplete },
  methods: {
    async search(input) {
      if (input.length < 2) {
        return [];
      }
      const data = await fetch(`@{WorksR}?term=${input}`);
      const suggestions = await data.json();
      return suggestions;
    },
    update(results, _selectedIndex) {
      if (this.$refs.autocomplete.value.length < 2) {
        this.work_id = 0;
        this.movements = [];
        this.parts = [];
      }
      this.show_add_work_link =
        results.length === 0 &&
        !this.work_id &&
        this.$refs.autocomplete.value.length >= 2;
    },
    getResultValue(result) {
      return result.label;
    },
    async autocompleteSubmit({ value }) {
      this.show_add_work_link = false;
      this.work_id = value;
      const data = await fetch(`/api/movements/${value}`);
      const json = await data.json();
      this.movements = json.movements;
      this.movement_id = json.movements[0].value;
      this.parts = json.parts;
      this.part = json.parts[0];
    },
    async submit(e) {
      const s = new XMLSerializer();
      const body = {
        movement_id: this.movement_id,
        part: this.part,
        start_measure: this.start_measure,
        xml: s.serializeToString(this.editor.musicxml),
        description: this.description
      };
      this.loading = true;
      const resp = await fetch("@{UploadR}", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(body)
      });
      const json = await resp.json();
      this.loading = false;
      if (json.error) {
        this.alert_message = json.error;
        this.show_alert = true;
        return;
      }
      if (json.success) {
        this.show_success = true;
        await this.fetchEntries() // update table
        return;
      }
    },
    async fetchXml(item, _index, _event) {
      this.movement_id = item.movement_id;
      this.part = item.part;
      this.start_measure = item.start_measure;
      this.description = item.description
      const resp = await fetch(`/api/musicxml/${item.entry_id}`);
      if (resp.status === 404) {
        this.alert_message = "Error retrieving MusicXML";
        this.show_alert = true;
        return;
      }
      const blob = await resp.blob();
      this.renderXml(blob);
    },
    renderXml(file) {
      if (file) {
        const reader = new FileReader();
        reader.readAsText(file);
        reader.onload = async ({ target: { result } }) => {
          await this.editor.render(result);
          this.show_editor = true;
          this.disable_submit = false;
        };
      } else {
        this.disable_submit = true;
        this.editor.clear();
      }
    },
    clear() {
      this.work_id = 0;
      this.movement_id = 0;
      this.start_measure = 1;
      this.movements = [];
      this.xml_file = null;
      this.$refs.autocomplete.value = "";
      this.show_add_work_link = false;
      this.show_editor = false;
      this.editor.clear();
    },
    async fetchEntries() {
      const resp = await fetch(`/api/entries/${this.work_id}`);
      this.entries = await resp.json();
    }
  },
  watch: {
    movement_id: async function() {
      await this.fetchEntries();
    },
    part: async function() {
      await this.fetchEntries();
    }
  }
});
