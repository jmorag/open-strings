const vue = new Vue({
  el: "##{rawJS uploadId}",
  data: {
    show_add_work_link: false,
    work_id: 0,
    movement_id: 0,
    start_measure: 1,
    movements: [],
    parts: [],
    part: "",
    xml_file: null,
    editor: new FingeringEditor(#{renderId}),
  },
  components: { Autocomplete },
  methods: {
    async search(input) {
      if (input.length < 2) {
        return [];
      }
      const data = await fetch(`@{WorksR}?term=${input}`);
      const suggestions = await data.json();
      console.log(suggestions);
      return suggestions;
    },
    update(results, selectedIndex) {
      console.log(results, selectedIndex);
      if (this.$refs.autocomplete.value.length < 2) {
        this.work_id = 0;
        this.movements = [];
        this.parts = [];
      }
      this.show_add_work_link =
        results.length === 0 &&
        !this.work_id &&
        this.$refs.autocomplete.value.length >= 2;
    },
    getResultValue(result) {
      return result.label;
    },
    async autocompleteSubmit({ value }) {
      console.log("Called autocomplete submit", value);
      this.work_id = value;
      const data = await fetch(`/api/movements/${value}`);
      const json = await data.json();
      this.movements = json.movements;
      this.movement_id = json.movements[0].value;
      this.parts = json.parts;
      this.part = json.parts[0];
    },
    submit(e) {
      console.log("Called form submit", e);
    },
    async renderXml({ target }) {
      const reader = new FileReader();
      reader.readAsText(target.files[0]);
      reader.onload = ({ target: { result } }) => this.editor.render(result);
    },
    clear() {
      this.work_id = 0;
      this.movement_id = 0;
      this.start_measure = 1;
      this.movements = [];
      this.xml_file = null;
      this.$refs.autocomplete.value = "";
      this.show_add_work_link = false;
    },
  },
  watch: {
    xml_file: async function(file) {
      if (file) {
        const reader = new FileReader();
        reader.readAsText(file);
        reader.onload = ({ target: { result } }) => this.editor.render(result);
      } else {
        this.editor.clear();
      }
    }
  }
});
