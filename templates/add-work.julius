const vue = new Vue({
  el: "##{rawJS addWorkId}",
  data: {
    url: "",
    title: "",
    composer: "",
    composer_url: null,
    instrumentation: [],
    work_movements: [],
    imslp: true,
    show_alert: false,
    loading: false,
    work_id: 0,
    validated: false,
  },
  components: { Autocomplete },
  methods: {
    async search(input) {
      if (input.length < 2) {
        return [];
      }
      const data = await fetch(`@{ComposersR}?term=${input}`);
      const suggestions = await data.json();
      if (suggestions.length === 0) {
        this.composer = input;
      }
      return suggestions;
    },
    autocompleteSubmit(e) {
      this.composer = e.label;
    },
    validatePart(part) {
      const regex = /^(?:(?:(solo|tutti)\s*)?(?:(violin|viola|cello|bass))(\s+[1-9]\d*)?|strings|quartet)$/;
      return part.match(regex);
    },
    async add_work(e) {
      if (!(this.instrumentation.length > 0) || !this.composer || !this.title) {
        this.validated = true;
        return;
      }
      const body = {
        work_url: this.url.trim() || null,
        work_title: this.title.trim(),
        work_composer: this.composer.trim(),
        work_instrumentation: this.instrumentation,
        work_movements: this.work_movements.map((m) => m.trim()),
        composer_url: this.composer_url,
      };
      this.loading = true;
      const resp = await fetch("@{AddWorkR}", {
        method: "POST",
        headers: { "Content-Type": "application/json", "X-XSRF-TOKEN": #{csrf} },
        body: JSON.stringify(body),
      });
      const json = await resp.json();
      if (json.already_uploaded) {
        this.work_id = json.work_id;
        this.show_alert = true;
        this.loading = false;
        return;
      }
      // Don't set loading to false before navigating so buttons stay disabled
      window.location.href = json.destination;
    },

    clear(e) {
      this.title = "";
      this.$refs.autocomplete.value = this.composer = "";
      this.instrumentation = [];
      this.work_movements = [];
      this.imslp = true;
      this.show_alert = false;
      this.validated = false;
    },

    reset(e) {
      this.clear();
      this.url = "";
    },
  },
  watch: {
    url: async function (url) {
      this.clear();
      if (!url.includes("imslp.org")) {
        this.imslp = false;
        return;
      }
      const data = await fetch(`/api/imslp/${encodeURIComponent(url)}`);
      const json = await data.json();
      this.title = json.title;
      this.$refs.autocomplete.value = this.composer = json.composer;
      this.composer_url = json.composer_url;
      this.instrumentation = json.instrumentation.filter(this.validatePart);
      this.work_movements = json.movements;
    },
  },
});
