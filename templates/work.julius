const vue = new Vue({
  el: "##{rawJS wId}",
  data: {
    work_id: #{jsWorkId},
    start_measure: "", // usually a number, but should be displayed as empty on paint
    movements: #{movements},
    movement_id: (#{movements})[0].value,
    parts: #{parts},
    part: (#{parts})[0],
    xml_file: null,
    table_fields: [
      "movement",
      "part",
      "measures",
      "description",
      {
        key: "uploaded_by",
        formatter: ({ user, time }) => {
          const d = new Date(time);
          return `${user} on ${d.toLocaleDateString()} at ${d.toLocaleTimeString()}`;
        }
      }
    ],
    entries: #{entries},
    editor: new FingeringEditor(#{renderId}, true),
    description: "",
    show_alert: false,
    alert_message: "",
    disable_submit: true,
    show_instructions: false,
    validated: false,
    loading: false,
  },

  methods: {
    async submit(e) {
      if (!this.start_measure || !this.xml_file) {
        this.validated = true;
        return;
      }
      const s = new XMLSerializer();
      const body = {
        movement_id: this.movement_id,
        part: this.part,
        start_measure: this.start_measure,
        xml: s.serializeToString(this.editor.musicxml),
        description: this.description
      };
      this.loading = true;
      const resp = await fetch("@{UploadR}", {
        method: "POST",
        headers: { "Content-Type": "application/json", "X-XSRF-TOKEN": #{csrf} },
        body: JSON.stringify(body)
      });
      const json = await resp.json();
      if (json.error) {
        this.alert_message = json.error;
        this.show_alert = true;
        this.loading = false;
        return;
      }
      if (json.success) {
        window.location.href = `/entry/${json.entry_id}`;
      }
    },

    gotoEntry(item, _index, _event) {
      window.location.href = `/entry/${item.entry_id}`;
    },

    renderXml(file) {
      if (file) {
        this.loading = true;
        const reader = new FileReader();
        reader.onload = async ({ target: { result } }) => {
          this.editor.clear();
          await this.editor.render(result, this.start_measure);
          this.loading = false;
        };
        reader.onerror = (event) => {
          this.alert_message = `Failed to read file: ${reader.error}`;
          this.show_alert = true;
          this.loading = false;
        };
        reader.readAsText(file);
      } else {
        this.editor.clear();
      }
    },
  },

  watch: {
    xml_file: function(val) {
      this.show_alert = false;
      this.renderXml(val);
    }
  }
});
