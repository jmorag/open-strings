const form = document.querySelector("form");
const work_input = document.getElementById(#{workId});
let work_id = "0";
let movement_id = "0";
const ac = new autocomplete({
  input: work_input,
  fetch: async (text, update) => {
    const data = await fetch(`@{ComposersR}?term=${text}`);
    const suggestions = await data.json();
    update(suggestions);
  },
  onSelect: async item => {
    work_input.value = item.label;
    work_id = item.value;
    const data = await fetch(`@{MovementsR}?work-id=${work_id}`);
    const movements = await data.json();
    const movementsDiv = document.getElementById(#{movementId})
    let radioButtons = "";
    if (movements.length == 1) {
      movement_id = movements[0].value;
    } else {
      movements.forEach((m, i) => {
        radioButtons += `
<div>
  <input type="radio" value="${m.value}" id="${m.value}" name="movement">
  <label for=${m.value}>${i + 1}. ${m.label}</label>
</div>`;
      });
      movementsDiv.innerHTML = radioButtons;
    }
  },
  debounceWaitMs: 300,
  preventSubmit: true
});

const editor = new FingeringEditor(#{renderId})
form.addEventListener("change", ({ target }) => {
  console.log(target);
  switch (target.getAttribute("type")) {
    case "radio":
      movement_id = target.getAttribute("value");
      break;
    case "file":
      let reader = new FileReader();
      reader.readAsText(target.files[0]);
      reader.onload = ({ target: { result }}) => editor.render(result);
      break;
  }
})
